<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed under Apache 2.0 -->
<!-- Copyright 2011, National Research Council of Canada -->
<!-- Property of Lakehead University -->


<!--
********************************************************************************
*
*                    National Research Council Canada - IIT
*
* PROJECT:		SAVOIR Documents
* AUTHOR(S):	Justin Hickey
* PURPOSE:		The build infrastructure of SAVOIR is based on a series of build
*				files to allow deployment on both a production server and a
*				development server. Please see the "build.xml" file in the
*				"SAVOIR_MasterBuild" directory for further information on how
*				the build system works.
*
*				IMPORTANT NOTE:
*				===============
*					The project "build.xml" files can be used directly while
*					developing, but they will need a "build.properties" file in
*					order to run. Therefore, you should first run the
*					"copy-build-properties" target in the master build file to
*					create the "build.properties" files for the projects.
*
*				This build file defines the targets for copying the SAVOIR
*				documentation to the web server.
* DATE CREATED:	Jun 15, 2012
*
********************************************************************************
-->

<project name="SavoirDocuments" default="deploy">

	<description>Build file for the SAVOIR documentation</description>

	<!-- **************************** Properties *************************** -->

	<!-- Distribution directories -->
	<property name="src.home" value="${basedir}/src" />
	<property name="dist.home" value="${basedir}/dist" />

	<!-- ************************** Initialization  ************************ -->

	<!-- Check if the property file exists -->
	<available file="${basedir}/build.properties" property="prop.file.exists" />
	<fail message="Build properties file missing! Use the copy-build-properties target of the top level build to create it."
		unless="prop.file.exists" />

	<!-- Load in the main property file -->
	<property file="${basedir}/build.properties" />

	<!-- A task def below requires the ant-contrib jar file so make sure it is downloaded
		Download ant-contrib from the web site so that it can be used even without
		any special installation -->
	<mkdir dir="${savoir.cont.jar.dir}" />
	<get src="${savoir.cont.url}/${savoir.cont.install.version}/${savoir.cont.jar.file}"
		dest="${savoir.cont.jar.dir}/${savoir.cont.jar.file}" usetimestamp="true" skipexisting="true" />
	
	<!-- **************************** File Sets **************************** -->

	<fileset id="root.src.files" dir="${src.home}">
		<include name="LICENSE.src" />
		<include name="NOTICE.src" />
		<include name="README.src" />
	</fileset>

	<fileset id="html.src.files" dir="${src.home}">
		<include name="**/*.src.html" />
	</fileset>

	<fileset id="css.src.files" dir="${src.home}">
		<include name="css/*" />
	</fileset>

	<fileset id="images.src.files" dir="${src.home}">
		<include name="**/*.png" />
		<include name="**/*.jpg" />
		<include name="**/*.gif" />
	</fileset>

	<fileset id="dist.doc.files" dir="${dist.home}">
		<exclude name="README" />
		<exclude name="sourceForge/" />
		<exclude name="development/" />
	</fileset>

	<fileset id="dist.doc.dev.files" dir="${dist.home}">
		<exclude name="README" />
		<exclude name="sourceForge/" />
	</fileset>

	<!-- *************************** Class Paths *************************** -->

	<!-- none -->

	<!-- ************************* Task Definitions ************************ -->

	<!-- Define the ant-contrib ant tasks -->
	<taskdef resource="net/sf/antcontrib/antlib.xml" classpath="${savoir.cont.jar.dir}/${savoir.cont.jar.file}" />
	
	<!-- Get the user name and password for the remote SAVOIR server if necessary -->
	<macrodef name="get-user-docs" description="Prompt the user for his/her username and password for the web server">
		<sequential>
			<echo message="Macrodef: get-user-docs" />
			<echo message=" " />
			<if>
				<isset property="savoir.remote.server.docs" />
				<then>
					<check-if-eclipse-docs/>
					<echo message=" " />
					<echo message="IMPORTANT NOTE!!!" />
					<echo message="The system has determined that the SAVOIR documentation" />
					<echo message="will be deployed to a remote SAVOIR server." />
					<input message="Please enter your SAVOIR server username " addproperty="savoir.server.user.name"/>

					<input message="Please enter your SAVOIR server password " addproperty="savoir.server.password">
						<handler type="secure" />
					</input>
				</then>
			</if>
		</sequential>
	</macrodef>

	<!-- Check if the user is trying to deploy from Eclipse -->
	<macrodef name="check-if-eclipse-docs" description="Check if the user is calling this script from eclipse">
		<sequential>
			<echo message="Macrodef: check-if-eclipse-docs" />
			<echo message=" " />
			<if>
				<isset property="eclipse.running" />
				<then>
					<echo message=" " />
					<echo message="ERROR - Build failed" />
					<echo message="It appears you are trying to deploy the SAVOIR documentation to a remote" />
					<echo message="server. Unfortunately, remote deployment will only work from the command" />
					<echo message="line since it prompts for a password and secure entry of your password" />
					<echo message="is not supported in Eclipse." />
					<echo message="To deploy from the command line, perform the following commands:" />
					<echo message="cd &lt;workspace dir&gt;/SAVOIR_Docs" />
					<echo message="ant deploy" />
					<fail>See message above for build failure explanation</fail>
				</then>
			</if>
		</sequential>
	</macrodef>
					
	<!-- Deploy the documents on the same server as the build -->
	<macrodef name="deploy-same-srv-docs" description="Deploy the documentation on the same server">
		<sequential>
			<echo message="Macrodef: deploy-same-srv-docs" />
			<echo message=" " />
			<if>
				<equals arg1="${savoir.deploy.server}" arg2="development" />
				<then>

					<!-- Uncomment the development sections of the main documentation page -->
					<replace file="${dist.home}/index.html">
						<replacefilter
							token="&lt;!-- This line is removed by the build script for deployment on a development server"
							value="" />
						<replacefilter
							token="This line is removed by the build script for deployment on a development server --&gt;"
							value="" />
					</replace>

					<copy todir="${savoir.docs.deploy.directory}">
						<fileset refid="dist.doc.dev.files" />
					</copy>
				</then>
				<else>
					<copy todir="${savoir.docs.deploy.directory}">
						<fileset refid="dist.doc.files" />
					</copy>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- Deploy the documents on a remote server -->
	<macrodef name="deploy-remote-srv-docs" description="Deploy the documentation on the remote web server">
		<sequential>
			<echo message="Macrodef: deploy-remote-srv-docs" />
			<echo message=" " />
			<if>
				<equals arg1="${savoir.deploy.server}" arg2="development" />
				<then>

					<!-- Uncomment the development sections of the main documentation page -->
					<replace file="${dist.home}/index.html">
						<replacefilter
							token="&lt;!-- This line is removed by the build script for deployment on a development server"
							value="" />
						<replacefilter
							token="This line is removed by the build script for deployment on a development server --&gt;"
							value="" />
					</replace>

					<scp todir="${savoir.server.user.name}:${savoir.server.password}@${savoir.docs.deploy.host}:${savoir.docs.deploy.directory}" sftp="true" trust="true">
						<fileset refid="dist.doc.dev.files" />
					</scp>
				</then>
				<else>
					<scp todir="${savoir.server.user.name}:${savoir.server.password}@${savoir.docs.deploy.host}:${savoir.docs.deploy.directory}" sftp="true" trust="true">
						<fileset refid="dist.doc.files" />
					</scp>
				</else>
			</if>
		</sequential>
	</macrodef>

	<!-- ************************* Default Targets ************************* -->

	<!-- **** Init **** -->
	<target name="init" description="No target actions">
		<echo message="==== Savoir documents init target ====" />

		<!-- Make the required directories -->
		<mkdir dir="${dist.home}" />

		<!-- Get the current year to be used for the copyright message in the NOTICE file -->
		<tstamp>
			<format property="currYear" pattern="yyyy" />
		</tstamp>

	</target>

	<!-- **** Build **** -->
	<target name="build" description="No target actions">
		<echo message="==== Savoir documents build target ====" />
		<echo message="Build target not supported." />
	</target>

	<!-- **** Package **** -->
	<target name="package" depends="clean, init" description="Modify some text in the documents and copy to the distribution directory">
		<echo message="==== Savoir documents package target ====" />
		
		<!-- Copy the root source files to dist.home substituting any values for property keys -->
		<copy todir="${dist.home}">
			<fileset refid="root.src.files" />
			<globmapper from="*.src" to="*" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		
		<!-- Copy the HTML source files to dist.home substituting any values for property keys -->
		<copy todir="${dist.home}">
			<fileset refid="html.src.files" />
			<globmapper from="*.src.html" to="*.html" />
			<filterchain>
				<expandproperties />
			</filterchain>
		</copy>
		
		<!-- Copy the CSS source files to dist.home -->
		<copy todir="${dist.home}">
			<fileset refid="css.src.files" />
		</copy>
		
		<!-- Copy any source images to dist.home -->
		<copy todir="${dist.home}">
			<fileset refid="images.src.files" />
		</copy>
		
	</target>

	<!-- **** Deploy **** -->
	<target name="deploy" depends="package" description="Publish the SAVOIR documents to the web server">
		<echo message="==== Savoir documents deploy target ====" />

		<if>
			<not>
				<istrue value="${savoir.is.master.build}" />
			</not>
			<then>

				<!-- Get the host information -->
				<hostinfo prefix="host" />
		
				<!-- Check if we require a username and password -->
				<condition property="savoir.remote.server.docs">
					<not>
						<or>
							<matches pattern="${host.ADDR4}" string="${savoir.docs.deploy.host}" />
							<matches pattern="${host.NAME}" string="${savoir.docs.deploy.host}" />
						</or>
					</not>
				</condition>

				<!-- Get the user credentials if necessary -->
				<get-user-docs/>
			</then>
		</if>
		
		<!-- Deploy the SAVOIR documents to the web server -->
		<if>
			<istrue value="${savoir.remote.server.docs}" />
			<then>
				<deploy-remote-srv-docs/>
			</then>
			<else>
				<deploy-same-srv-docs/>
			</else>
		</if>

	</target>

	<!-- **** Clean **** -->
	<target name="clean" description="Clean anything that is built">
		<echo message="==== Savoir documents clean target ====" />

		<!-- Delete the distribution directory -->
		<delete dir="${dist.home}"  includeEmptyDirs="true" />
		
	</target>

	<!-- **** Undeploy **** -->
	<target name="undeploy" description="No target actions">
		<echo message="==== Savoir documents undeploy target ====" />
		<echo message="Undeploy target not supported." />
	</target>

	<!-- **** Doc **** -->
	<target name="doc" description="No target actions">
		<echo message="==== Savoir documents doc target ====" />
		<echo message="Doc target not supported." />
	</target>

	<!-- **** Javadoc **** -->
	<target name="javadoc" description="No target actions">
		<echo message="==== Savoir documents javadoc target ====" />
		<echo message="Javadoc target not supported." />
	</target>

	<!-- **** Test **** -->
	<target name="test" description="No target actions">
		<echo message="==== Savoir documents test target ====" />
		<echo message="Test target not supported." />
	</target>

	<!-- ************************* Optional Targets ************************ -->

	<!-- none -->

	<!-- ********************* Project Specific Targets ******************** -->

	<!-- none -->

</project>
