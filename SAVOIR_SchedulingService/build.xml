<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed under Apache 2.0 -->
<!-- Copyright 2011, National Research Council of Canada -->
<!-- Property of Lakehead University -->


<!--
********************************************************************************
*
*                    National Research Council Canada - IIT
*
* PROJECT:		SAVOIR Scheduling Services
* AUTHOR(S):	Justin Hickey, Yonghua You
* PURPOSE:		The build infrastructure of SAVOIR is based on a series of build
*				files to allow deployment on both a development server and a
*				production server. Please see the "build.xml" file in the
*				"SAVOIR_MasterBuild" directory for further information on how
*				the build system works.
*
*				IMPORTANT NOTE:
*				===============
*					The project "build.xml" files can be used directly while
*					developing, but they will need a "build.properties" file in
*					order to run. Therefore, you should first run the
*					"copy-build-properties" target in the master build file to
*					create the "build.properties" files for the projects.
*
*				This build file defines the targets for building the scheduling
*				services. It will define targets to deploy the services to a
*				server and a target for generationg client stubs is also
*				defined.
* DATE CREATED:	Jul 14, 2011
*
********************************************************************************
-->

<project name="savoirSchedServices" default="build" xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns="antlib:org.apache.tools.ant">
	
	<description>Build file for the SAVOIR scheduling services</description>
	
	<!-- **************************** Properties *************************** -->
	
	<!-- Load the environment since an environment variable is used below -->
	<property environment="env" />
	
	<!-- Distribution directories -->
	<property name="src.home" value="${basedir}/src" />
	<property name="build.home" value="${basedir}/build" />
	<property name="dist.home" value="${basedir}/dist" />
	<property name="lib.home" value="${basedir}/libs" />
	<property name="local.lib.home" value="${basedir}/localLib" />
	<property name="resrc.home" value="${basedir}/resources" />
	
	<!-- Software installation directories --> 
	<property name="catalina.home" value="${env.CATALINA_HOME}" />
	
	<!-- Deployment files -->
	<property name="web.app.name" value="SAVOIR_SchedulingService" />
	<property name="web.app.path" value="/${web.app.name}" />
	<property name="stubs.jar.name" value="savoirSchedulerStubs-0.0.0" />
	
	<!-- ************************** Initialization  ************************ -->

	<!-- Check if the property file exists -->
	<available file="${basedir}/build.properties" property="prop.file.exists" />
	<fail message="Build properties file missing! Use the copy-build-properties target of the top level build to create it."
		unless="prop.file.exists" />
	
	<!-- Load in the main property file -->
	<property file="${basedir}/build.properties" />
	
	<!-- The ivy task def below requires the ivy.jar file so make sure it is downloaded
		Download ivy from the web site so that it can be used even without
		any special installation -->
	<mkdir dir="${savoir.ivy.jar.dir}" />
	<get src="${savoir.ivy.url}/${savoir.ivy.install.version}/${savoir.ivy.jar.file}"
		dest="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" usetimestamp="true" skipexisting="true" />

	<!-- **************************** File Sets **************************** -->
	
<!--	<fileset id="master.libs" dir="${lib.home}/master">
		<include name ="**/*.jar" />
	</fileset>  USE THIS WHEN WE SWITCH TO IVY INSTEAD OF THE NEXT FILESET -->
	
	<fileset id="master.libs" dir="${local.lib.home}/">
		<include name ="**/*.jar" />
	</fileset>
	
	<!-- There are jars in other directories besides the lib directory so 
		set the lib root to the catalina root directory -->
	<fileset id="catalina.libs" dir="${catalina.home}">
		<include name ="**/*.jar" />
	</fileset>
	
	<fileset id="build.classes" dir="${build.home}/">
		<include name ="**/*.class" />
	</fileset>
	
	<fileset id="stub.classes" dir="${build.home}/">
		<include name="ca/gc/nrc/iit/savoir/scheduler/SavoirScheduler.class" />
		<include name="ca/gc/nrc/iit/savoir/scheduler/types/msg/*Session*.class" />
		<include name="ca/gc/nrc/iit/savoir/scheduler/types/msg/GetReservation*.class" />
		<include name="ca/gc/nrc/iit/savoir/scheduler/types/*.class" />
	</fileset>
	
	<fileset id="resource.files" dir="${resrc.home}">
		<exclude name="**/*.java" />
	</fileset>
	
	<fileset id="misc.files" dir="${src.home}">
		<exclude name="**/*.java" />
		<exclude name="web.xml" />
	</fileset>
	
	<!-- *************************** Class Paths *************************** -->
	
	<path id="master.class.path">
		<fileset refid="master.libs" />
	</path>

	<path id="catalina.class.path">
		<fileset refid="catalina.libs" />
	</path>

	<path id="build.class.path">
		<fileset refid="build.classes" />
	</path>

	<!-- ************************* Task Definitions ************************ -->
	
	<!-- Define the ivy ant tasks -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
		uri="antlib:org.apache.ivy.ant" classpath="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" />
	
	<!-- Define the ant tasks for using the tomcat manager -->
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
		classpathref="catalina.class.path" />
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask"
		classpathref="catalina.class.path" />
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"
		classpathref="catalina.class.path" />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"
		classpathref="catalina.class.path" />
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask"
		classpathref="catalina.class.path" />
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask"
		classpathref="catalina.class.path" />
	
	<!-- Package the software into a WAR file -->
	<macrodef name="package-war" description="Package the scheduling services software into a WAR file">
		<sequential>
			<echo message="Macrodef: package-war" />
			<echo message=" " />
			<war destfile="${dist.home}/${web.app.name}.war" webxml="${src.home}/web.xml" update="true"
				filesetmanifest="mergewithoutmain">
					<classes refid="build.classes" />
					<classes refid="resource.files" />
					<classes refid="misc.files" />
					<lib refid="master.libs" />

					<manifest>
						<attribute name="Built-By" value="${user.name}" />
						<attribute name="Main-Class" value="" />
						<attribute name="Class-Path" value="." />
					</manifest>				
			</war>
		</sequential>
	</macrodef>

	<!-- Package the client stubs into a JAR file -->
	<macrodef name="package-client-stubs" description="Package the scheduling services client stubs into a JAR file">
		<sequential>
			<echo message="Macrodef: package-client-stubs" />
			<echo message=" " />
			<jar destfile="${dist.home}/${stubs.jar.name}.jar" basedir="${build.home}"
				filesetmanifest="mergewithoutmain" excludes="**/*">
					<fileset refid="stub.classes" />

					<manifest>
						<attribute name="Built-By" value="${user.name}" />
						<attribute name="Main-Class" value="" />
						<attribute name="Class-Path" value="." />
					</manifest>				
			</jar>
		</sequential>
	</macrodef>

	<!-- ************************* Default Targets ************************* -->
	
	<!-- **** Init **** -->
	<target name="init" description="Initialises the scheduling service project">
		<echo message="==== Savoir scheduling services init target ====" />
		
		<!-- Make the required diectories -->
		<mkdir dir="${build.home}" />
		<mkdir dir="${dist.home}" />
<!--		<mkdir dir="${lib.home}" />
		<mkdir dir="${savoir.repo.home}" /> -->
	
	</target>

	<!-- **** Build **** -->
	<target name="build" depends="clean, init" description="Builds java classes">		
		<echo message="==== Savoir scheduling services build target ====" />

		<!-- Compile Java classes as necessary -->
		<javac srcdir="${src.home}" destdir="${build.home}" debug="${savoir.sced.compile.debug}"
			deprecation="${savoir.sced.compile.deprecation}"  verbose="${savoir.sced.compile.verbose}"
			optimize="${savoir.sced.compile.optimize}" source="${savoir.java.source.ver}"
			target="${savoir.java.target.ver}">
				<compilerarg value="-Xlint:unchecked" />
				<classpath refid="master.class.path" />
		</javac>
	</target>

	<!-- **** Package **** -->
	<target name="package" depends="build" description="Copies default resources and calls jar target">
		<echo message="==== Savoir scheduling services package target ====" />

		<package-war/>
		<package-client-stubs/>
	</target>
	
	<!-- **** Deploy **** -->
	<target name="deploy" depends="undeploy, package" description="Deploys application on servlet container">
		<echo message="==== Savoir scheduling services deploy target ====" />

		<echo message="Deploying web application at ${savoir.sced.deploy.url}"/>
		<deploy url="${savoir.sced.deploy.url}" username="${savoir.sced.deploy.username}"
			password="${savoir.sced.deploy.password}" path="${web.app.path}"
			war="${dist.home}/${web.app.name}.war" />

<!--		<echo message="Deploying client stubs to ${savoir.repo.home}"/> -->
		<echo message="Deploying client stubs to Management services"/>
		
		<!-- This should deploy to the SAVOIR LAN repository - we need to convert this to use ivy publish
			and then the projects should have an ivy dependency on the library -->
		
		<!-- For now, copy the library to the management services  -->
		<copy file="${dist.home}/${stubs.jar.name}.jar" todir="${basedir}/../SAVOIR_MgmtServices/localLib/ca.nrc.iit/" includeEmptyDirs="false" />
		
		<!-- Do a resolve so ivy publish gets the info it needs -->
<!--		<ivy:resolve/>
		
		<ivy:buildnumber organisation="ca.nrc.iit" module="savoirSchedServices" revision="${ivy.revision}" />
		<ivy:publish pubrevision="${ivy.new.revision}" conf="master" forcedeliver="true" overwrite="true"
			artifactspattern="${dist.home}/[artifact].jar" resolver="savoir-lib-repo" status="release">
		</ivy:publish> -->
	</target>
	
	<!-- **** Clean **** -->
	<target name="clean" description="Cleans anything that is built.">
		<echo message="==== Savoir scheduling services clean target ====" />

		<delete dir="${build.home}" includeEmptyDirs="true" />
		<delete dir="${dist.home}" includeEmptyDirs="true" />
<!--		<delete dir="${lib.home}" includeEmptyDirs="true" /> -->
		
		<!-- The bin directory is usually created by default -->
<!--		<delete dir="${basedir}/bin" includeEmptyDirs="true" /> -->
	</target>

	<!-- **** Undeploy **** -->
	<target name="undeploy" description="Remove application on servlet container">
		<echo message="==== Savoir scheduling services undeploy target ====" />

		<echo message="Undeploying at ${savoir.sced.deploy.url}"/>
		<undeploy url="${savoir.sced.deploy.url}" username="${savoir.sced.deploy.username}"
			password="${savoir.sced.deploy.password}" path="${web.app.path}" failonerror="false" />		
	</target>

	<!-- **** Doc **** -->
	<target name="doc" description="No target actions">
		<echo message="==== Savoir scheduling services doc target ====" />
		<echo message="Doc target not supported." />
	</target>

	<!-- **** Javadoc **** -->
	<target name="javadoc" description="Create Javadoc API documentation">
		<echo message="==== Savoir scheduling services javadoc target ====" />
		<echo message="Javadoc target not supported." />
	</target>

	<!-- **** Test **** -->
	<target name="test" description="No target actions">
		<echo message="==== Savoir scheduling services test target ====" />
		<echo message="Test target not supported." />
	</target>

	
	<!-- ************************* Optional Targets ************************ -->

	<!-- **** Install-local-libs **** -->
	<target name="install-local-libs"
		description="Install any local libraries to the Savoir repository">
			<echo message="==== Savoir scheduling services install-local-libs target ====" />
		
			<ivy:install organisation="ca.nrc.iit" module="cxf" overwrite="true"
				revision="2.2.3" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="org.eclipse.jdt.core" overwrite="true"
				revision="3.4.0.v874" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="savoirBusStubs" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="savoirSchedulerStubs" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="stax-api" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="xpp3_min" overwrite="true"
				revision="1.1.3.4.O-osgi" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="xstream" overwrite="true"
				revision="1.2.2-osgi" from="local-lib-repo" to="savoir-lib-repo" />
	</target>

	<!-- **** Retrieve-ivy-deps **** -->
	<target name="retrieve-ivy-deps" depends="install-local-libs"
		description="Retreive all library dependencies using Ivy to the project lib directory">
			<echo message="==== Savoir scheduling services retrieve-ivy-deps target ====" />
		
			<!-- Note that retrieve does a resolve as well thus, we don't have an ivy resolve target-->
			<ivy:retrieve pattern="${lib.home}/[conf]/[artifact].[ext]" />
	</target>

	<!-- ********************* Project Specific Targets ******************** -->
	
	<!-- none -->

</project>
