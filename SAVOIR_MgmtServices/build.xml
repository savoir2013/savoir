<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed under Apache 2.0 -->
<!-- Copyright 2011, National Research Council of Canada -->
<!-- Property of Lakehead University -->


<!--
********************************************************************************
*
*                    National Research Council Canada - IIT
*
* PROJECT:		SAVOIR MgmtServices
* AUTHOR(S):	Justin Hickey, Aaron Moss, Yonghua You, Yosri Harzallah
* PURPOSE:		The build infrastructure of SAVOIR is based on a series of build
*				files to allow deployment on both a development server and a
*				production server. Please see the "build.xml" file in the
*				"SAVOIR_MasterBuild" directory for further information on how
*				the build system works.
*
*				IMPORTANT NOTE:
*				===============
*					The project "build.xml" files can be used directly while
*					developing, but they will need a "build.properties" file in
*					order to run. Therefore, you should first run the
*					"copy-build-properties" target in the master build file to
*					create the "build.properties" files for the projects.
*
*				This build file defines the targets for building the management
*				services. It will define targets to deploy the services to a
*				server and a target for generationg client stubs is also
*				defined.
* DATE CREATED:	Feb 24, 2011
*
********************************************************************************
-->

<project name="savoirMgmtServices" default="build" xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns="antlib:org.apache.tools.ant">
	
	<description>Build file for the SAVOIR management services</description>
	
	<!-- **************************** Properties *************************** -->
	
	<!-- Load the environment since an environment variable is used below -->
	<property environment="env" />
	
	<!-- Distribution directories -->
	<property name="src.home" value="${basedir}/src" />
	<property name="build.home" value="${basedir}/build" />
	<property name="dist.home" value="${basedir}/dist" />
	<property name="lib.home" value="${basedir}/libs" />
	<property name="local.lib.home" value="${basedir}/localLib" />
	<property name="docs.home" value="${basedir}/docs" />
	<property name="resrc.home" value="${basedir}/resources" />
	<property name="war.lib.home" value="${basedir}/WebContent/WEB-INF/lib" />
	
	<!-- Software installation directories --> 
	<property name="catalina.home" value="${env.CATALINA_HOME}" />
	
	<!-- Deployment files -->
	<property name="web.app.name" value="SAVOIR_MgmtServices" />
	<property name="web.app.path" value="/${web.app.name}" />
	<property name="stubs.jar.name" value="savoirMgmtServices-stubs" />
	
	<!-- ************************** Initialization  ************************ -->

	<!-- Check if the property file exists -->
	<available file="${basedir}/build.properties" property="prop.file.exists" />
	<fail message="Build properties file missing! Use the copy-build-properties target of the top level build to create it."
		unless="prop.file.exists" />
	
	<!-- Load in the main property file -->
	<property file="${basedir}/build.properties" />
	
	<!-- The ivy task def below requires the ivy.jar file so make sure it is downloaded
		Download ivy from the web site so that it can be used even without
		any special installation -->
	<mkdir dir="${savoir.ivy.jar.dir}" />
	<get src="${savoir.ivy.url}/${savoir.ivy.install.version}/${savoir.ivy.jar.file}"
		dest="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" usetimestamp="true" skipexisting="true" />

	<!-- **************************** File Sets **************************** -->
	
	<fileset id="master.libs" dir="${lib.home}/master">
		<include name ="**/*.jar" />
	</fileset>
	
	<!-- There are jars in other directories besides the lib directory so 
		set the lib root to the catalina root directory -->
	<fileset id="catalina.libs" dir="${catalina.home}">
		<include name ="**/*.jar" />
	</fileset>
	
	<fileset id="build.classes" dir="${build.home}/classes">
		<include name ="**/*.class" />
	</fileset>
	
	<!-- Need to fix this - should use only this one or the one above - see compile-client-stubs
		should actually follow the SAVOIR_SchedulingService methodology -->
	<fileset id="build2.classes" dir="${build.home}/">
		<include name ="**/*.class" />
	</fileset>
	
	<fileset id="resource.files" dir="${resrc.home}">
		<exclude name="**/*.java" />
	</fileset>
	
	<fileset id="war.src.files" dir="WebContent">
		<exclude name="WEB-INF/web.xml" />
	</fileset>
	
	<fileset id="misc.files" dir="${src.home}">
		<exclude name="**/*.java" />
		<exclude name="**/doc-files/**" />
	</fileset>
	
	<!-- *************************** Class Paths *************************** -->
	
	<path id="master.class.path">
		<fileset refid="master.libs" />
	</path>

	<path id="catalina.class.path">
		<fileset refid="catalina.libs" />
	</path>

	<path id="build.class.path">
		<fileset refid="build.classes" />
	</path>

	<!-- Need to fix this - should use only this one or the one above - see compile-client-stubs 
		should actually follow the SAVOIR_SchedulingService methodology -->
	<path id="build2.class.path">
		<fileset refid="build2.classes" />
	</path>

	<!-- For java to work properly, we need to specify the classpath root as opposed to a
		list of classes (like refid=build.class.path) thus the location pathelement below -->
	<path id="run.java.class.path">
		<pathelement location="${build.home}/classes"/>
	</path>
	
	<!-- ************************* Task Definitions ************************ -->
	
	<!-- Define the ivy ant tasks -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
		uri="antlib:org.apache.ivy.ant" classpath="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" />
	
	<!-- Define the ant tasks for using the tomcat manager -->
	<taskdef name="deploy" classname="org.apache.catalina.ant.DeployTask"
		classpathref="catalina.class.path" />
	<taskdef name="list" classname="org.apache.catalina.ant.ListTask"
		classpathref="catalina.class.path" />
	<taskdef name="reload" classname="org.apache.catalina.ant.ReloadTask"
		classpathref="catalina.class.path" />
	<taskdef name="undeploy" classname="org.apache.catalina.ant.UndeployTask"
		classpathref="catalina.class.path" />
	<taskdef name="start" classname="org.apache.catalina.ant.StartTask"
		classpathref="catalina.class.path" />
	<taskdef name="stop" classname="org.apache.catalina.ant.StopTask"
		classpathref="catalina.class.path" />

	<!-- ************************* Default Targets ************************* -->
	
	<!-- **** Init **** -->
	<target name="init" description="Initialises the management services project">
		<echo message="==== Savoir mgmtServices init target ====" />
		
		<!-- Make the required diectories -->
		<mkdir dir="${build.home}" />
		<mkdir dir="${build.home}/classes" />
		<mkdir dir="${dist.home}" />
		<mkdir dir="${lib.home}" />
		<mkdir dir="${docs.home}" />
		<mkdir dir="${savoir.repo.home}" />
	
		<propertyfile file="${resrc.home}/mgmtservices.properties">
			
			<!-- Set the local properties -->
			<entry key="savoir.admin.name" value="${savoir.mgmt.admin.name}" />
			<entry key="savoir.admin.email" value="${savoir.mgmt.admin.email}" />

			<entry key="mgmtservices.email.host" value="${savoir.mgmt.email.host}" />
			<entry key="mgmtservices.email.port" value="${savoir.mgmt.email.port}" />
			<entry key="mgmtservices.email.from" value="${savoir.mgmt.email.from}" />
			<entry key="mgmtservices.email.replyto" value="${savoir.mgmt.email.replyto}" />
			<entry key="mgmtservices.email.username" value="${savoir.mgmt.email.username}" />
			<entry key="mgmtservices.email.password" value="${savoir.mgmt.email.password}" />
			<entry key="mgmtservices.email.useSSL" value="${savoir.mgmt.email.useSSL}" />
			<entry key="mgmtservices.email.useTLS" value="${savoir.mgmt.email.useTLS}" />

			<entry key="server.deployment" value="${savoir.mgmt.server.deployment}" />
	  		<entry key="repos.webPrefix" value="${savoir.mgmt.repos.webPrefix}" />

		</propertyfile>

		<!-- Set the Mule server url in any xml files
			Should this be in the build target instead -->
		<exec executable="${basedir}/setMuleSrvUrl.pl" failonerror="true" />
	</target>

	<!-- **** Build **** -->
	<target name="build" depends="clean, init, retrieve-ivy-deps" description="Builds java classes">		
		<echo message="==== Savoir mgmtServices build target ====" />

		<!-- Compile Java classes as necessary -->
		<javac source="${savoir.java.source.ver}" target="${savoir.java.target.ver}" srcdir="${src.home}"
			destdir="${build.home}/classes" debug="${savoir.mgmt.compile.debug}"
			deprecation="${savoir.mgmt.compile.deprecation}" optimize="${savoir.mgmt.compile.optimize}">
				<!--<classpath refid="build.class.path" />-->
				<classpath refid="master.class.path" />
				<classpath refid="catalina.class.path" />
		</javac>

		<!-- Copy application resources -->
		<copy todir="${build.home}/classes">
			<fileset refid="resource.files" />
			<fileset refid="misc.files" />
		</copy>
		
		<!-- Compile messaging rules -->
		<java classname="ca.gc.nrc.iit.savoir.mgmtUtils.RuleCompiler">
			<arg value="${build.home}/classes/ca/gc/nrc/iit/savoir/resourceMgmt/MessageState.drl"/>
			
			<classpath refid="run.java.class.path" />
			<classpath refid="master.class.path" />
			<classpath refid="catalina.class.path" />
		</java>
	</target>

	<!-- **** Package **** -->
	<target name="package" description="Copies default resources and calls jar target">
		<echo message="==== Savoir mgmtServices package target ====" />

		<antcall target="package-war" />
		<antcall target="javadoc" />
		<antcall target="package-client-stubs" />
	</target>
	
	<!-- **** Deploy **** -->
	<target name="deploy" depends="undeploy, package" description="Deploys application on servlet container">
		<echo message="==== Savoir mgmtServices deploy target ====" />

		<echo message="Deploying web application at ${savoir.mgmt.deploy.url}"/>
		<deploy url="${savoir.mgmt.deploy.url}" username="${savoir.mgmt.deploy.username}"
			password="${savoir.mgmt.deploy.password}" path="${web.app.path}"
			war="${dist.home}/${web.app.name}.war" />

		<echo message="Deploying client stubs to ${savoir.repo.home}"/>
		
		<!-- Do a resolve so ivy publish gets the info it needs -->
		<ivy:resolve/>
		
		<ivy:buildnumber organisation="ca.nrc.iit" module="savoirMgmtServices" revision="${ivy.revision}" />
		<ivy:publish pubrevision="${ivy.new.revision}" conf="master" forcedeliver="true" overwrite="true"
			artifactspattern="${dist.home}/[artifact].jar" resolver="savoir-lib-repo" status="release">
		</ivy:publish>
	</target>
	
	<!-- **** Clean **** -->
	<target name="clean" description="Cleans anything that is built.">
		<echo message="==== Savoir mgmtServices clean target ====" />

		<delete dir="${build.home}" includeEmptyDirs="true" />
		<delete dir="${dist.home}" includeEmptyDirs="true" />
		<delete dir="${lib.home}" includeEmptyDirs="true" />
		<delete dir="${docs.home}" includeEmptyDirs="true" />
		
		<!-- The bin directory is usually created by default -->
		<delete dir="${basedir}/bin" includeEmptyDirs="true" />
	</target>

	<!-- **** Undeploy **** -->
	<target name="undeploy" description="Remove application on servlet container">
		<echo message="==== Savoir mgmtServices undeploy target ====" />

		<echo message="Undeploying at ${savoir.mgmt.deploy.url}"/>
		<undeploy url="${savoir.mgmt.deploy.url}" username="${savoir.mgmt.deploy.username}"
			password="${savoir.mgmt.deploy.password}" path="${web.app.path}" failonerror="false" />		
	</target>

	<!-- **** Doc **** -->
	<target name="doc" description="No target actions">
		<echo message="==== Savoir mgmtServices doc target ====" />
		<echo message="Doc target not supported." />
	</target>

	<!-- **** Javadoc **** -->
	<target name="javadoc" description="Create Javadoc API documentation">
		<echo message="==== Savoir mgmtServices javadoc target ====" />

		<!-- Clean API docs -->
		<delete dir="${docs.home}/api" />
		<mkdir dir="${docs.home}/api" />
		
		<!-- Generate API docs -->
		<javadoc destdir="${docs.home}/api" packagenames="*">
			<sourcepath>
				<pathelement path="${src.home}" />
			</sourcepath>
			<classpath refid="master.class.path" />
			<classpath refid="catalina.class.path" />
		</javadoc>

	</target>

	<!-- **** Test **** -->
	<target name="test" description="No target actions">
		<echo message="==== Savoir mgmtServices test target ====" />
		<echo message="Test target not supported." />
	</target>

	
	<!-- ************************* Optional Targets ************************ -->

	<!-- **** Install-local-libs **** -->
	<target name="install-local-libs"
		description="Install any local libraries to the Savoir repository">
			<echo message="==== Savoir mgmtServices install-local-libs target ====" />
		
			<ivy:install organisation="ca.nrc.iit" module="cxf" overwrite="true"
				revision="2.2.3" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="org.eclipse.jdt.core" overwrite="true"
				revision="3.4.0.v874" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="savoirBusStubs" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="savoirSchedulerStubs" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="stax-api" overwrite="true"
				revision="0.0.0" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="xpp3_min" overwrite="true"
				revision="1.1.3.4.O-osgi" from="local-lib-repo" to="savoir-lib-repo" />
			<ivy:install organisation="ca.nrc.iit" module="xstream" overwrite="true"
				revision="1.2.2-osgi" from="local-lib-repo" to="savoir-lib-repo" />
	</target>

	<!-- **** Retrieve-ivy-deps **** -->
	<target name="retrieve-ivy-deps" depends="install-local-libs"
		description="Retreive all library dependencies using Ivy to the project lib directory">
			<echo message="==== Savoir mgmtServices retrieve-ivy-deps target ====" />
		
			<!-- Note that retrieve does a resolve as well thus, we don't have an ivy resolve target-->
			<ivy:retrieve pattern="${lib.home}/[conf]/[artifact].[ext]" />
	</target>

	<!-- ********************* Project Specific Targets ******************** -->
	
	<!-- **** Package-war **** -->
	<target name="package-war" depends="build">
		
		<!-- Copy the libraries to the WEB-INF directory -->
		<delete dir="${war.lib.home}" />
		<mkdir dir="${war.lib.home}" />
		
		<copy todir="${war.lib.home}">
			<fileset refid="master.libs" />
			<!--<fileset dir="${basedir}/localLib/ca.nrc.iit" />
			<fileset dir="${basedir}/oldLib/libFromMainFolder" />
			<fileset dir="${basedir}/oldLib/libFromWebInf" />
			<fileset dir="${user.home}/.ivy2/savoirLibRepo/ca.nrc.iit">
				<include name="savoir*.jar" />
			</fileset>-->
		</copy>
		
		<war destfile="${dist.home}/${web.app.name}.war" webxml="WebContent/WEB-INF/web.xml" update="true">
			<classes dir="${build.home}\classes" />
			<fileset refid="war.src.files" />
		</war>
	</target>

	<!-- **** Compile-client-stubs **** -->
	<target name="compile-client-stubs" depends="init, retrieve-ivy-deps" description="Compiles java classes">

		<!-- We should actually be only compiling the interfaces, not the entire code base -->
		
		<javac source="${savoir.java.source.ver}" target="${savoir.java.target.ver}" srcdir="${src.home}"
			destdir="${build.home}" debug="${savoir.mgmt.compile.debug}"
			deprecation="${savoir.mgmt.compile.deprecation}" verbose="${savoir.mgmt.compile.verbose}"
			optimize="${savoir.mgmt.compile.optimize}">
				<compilerarg value="-Xlint:unchecked" />
				<classpath refid="build2.class.path" />
				<classpath refid="master.class.path" />
				<classpath refid="catalina.class.path" />
		</javac>
	</target>

	<!-- **** Package-client-stubs **** -->
	<target name="package-client-stubs" depends="compile-client-stubs" 
			description="Creates a jar file to call web services from other projects">
		<jar destfile="${dist.home}/${stubs.jar.name}.jar" 
				basedir="${build.home}" filesetmanifest="mergewithoutmain" 
				includes="ca/gc/nrc/iit/savoir/resourceMgmt/ResourceMgr.class,
					ca/gc/nrc/iit/savoir/resourceMgmt/HostConnectedToMultipleEndPointsException.class,
					ca/gc/nrc/iit/savoir/resourceMgmt/TicketHandle.class,
					ca/gc/nrc/iit/savoir/sessionMgmt/SessionMgr.class,
					ca/gc/nrc/iit/savoir/scenarioMgmt/ScenarioMgr.class,
					ca/gc/nrc/iit/savoir/scenarioMgmt/ScenarioCompilerOutput.class,
					ca/gc/nrc/iit/savoir/userMgmt/UserMgr.class,
					ca/gc/nrc/iit/savoir/credMgmt/CredMgr.class,
					ca/gc/nrc/iit/savoir/userMgmt/SavoirUserDetails.class,
					ca/gc/nrc/iit/savoir/oAuthProvider/OAuthProviderService.class,
					ca/gc/nrc/iit/savoir/oAuthProvider/WebServiceOAuthParams*.class,
			        ca/gc/nrc/iit/savoir/thresholdMgmt/ThresholdMgr.class,
					ca/gc/nrc/iit/savoir/model/**/*.class">
			<manifest>
				<attribute name="Built-By" value="${user.name}" />
				<attribute name="Main-Class" value="" />
				<attribute name="Class-Path" value="." />
			</manifest>
		</jar>
	</target>

</project>
