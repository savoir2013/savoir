# Licensed under Apache 2.0
# Copyright 2011, National Research Council of Canada
# Property of Lakehead University

#Fri, 05 Aug 2011 12:58:19 -0300
###############################################################################
#
# SAVOIR Administrator Properties
#
###############################################################################

# Name of SAVOIR administrator
savoir.admin.name=
# Email address of SAVOIR administrator
savoir.admin.email=


###############################################################################
#
# Management Services Email Properties
#
###############################################################################

# Host of email server
mgmtservices.email.host=
# SMTP port on server (optional, defaults to 587)
mgmtservices.email.port=
# Email address for messages from the management services to be from
mgmtservices.email.from=
# Email address to send replies and bounces to (optional, if unspecified, same 
# as `mgmtservices.email.from`)
mgmtservices.email.replyto=
# Username to connect to mail server with (optional, must specify 
# `mgmtservices.email.password` if set)
mgmtservices.email.username=
# Password to connect to mail server with (optional, must specify 
# `mgmtservices.email.username` if set)
mgmtservices.email.password=
# Use SSL for the connection (optional boolean property, defaults to "false")
mgmtservices.email.useSSL=
# SSL SMTP port on server (optional, defaults to 587)
#mgmtservices.email.sslPort=465
# Use TLS for the connection (optional boolean property, defaults to "false")
mgmtservices.email.useTLS=


###############################################################################
#
# Edge Device Registration Email contents
#
###############################################################################

# Note that all the email parameters in this section will be variable 
# escaped using the rules of EmailUtils.message(). Variables bound will be 
# ${contactName} for the name of the addressee (the SAVOIR admin or device 
# author), ${deviceName} for the name of the device, and ${deviceId} for the ID 
# of the device. For the message to the Device Author notifying them of 
# completed registration, the following variables will also be bound: 
# ${deviceType} to the type of the service, and ${savoirConnectionInfo} to the 
# SAVOIR connection information (The variables bound for the generation of each 
# connection info string are detailed in that property's comment)
#
# Due to the rules of Java properties file, to create a multi-line message, 
# newlines must be escaped as "\n", while the line in the properties file can 
# be wrapped with a "\" immediately before the end of line. Whitespace 
# beginning the succeeding line will be ignored.

# Subject of the email to the SAVOIR admin notifying them of a pending device 
# registration
registration.admin.subject=New Device Registration Pending

# Template of the email to the SAVOIR admin notifying them of a pending device 
# registration.
registration.admin.message=Good day ${contactName},\n\nA new device, "${deviceName}" (ID ${deviceId}) is pending registration. Please find attached a copy of the registration ticket that you can complete with any missing information, particularly the communications information. Once the file is complete, you can login to the SAVOIR administration console to upload the completed file.\n\n[This message is auto-generated by the SAVOIR Management Services]\n

# Name of attachment of registration ticket for SAVOIR admin
registration.admin.attachment.name=RegistrationTicket.xml

# Description of attachment of registration ticket for SAVOIR admin
registration.admin.attachment.desc=Registration ticket for ${deviceName}

# Subject of the email to the device author notifying them of a completed 
# device registration
registration.device.subject=SAVOIR Device Registration of ${deviceName}

# Template of the email to the device author notifying them of a completed 
# device registration.
registration.device.message=Good day ${contactName},\n\nYour registration of the device "${deviceName}" has been completed by the SAVOIR administrator. A complete registration ticket is attached, but a summary of the important fields of this ticket is printed below:\n\n\tService ID: "${deviceId}"\n\tService Name: "${deviceName}"\n\tService Type: "${deviceType}"\n${savoirConnectionInfo}\nIf you wish to submit an icon for your device, please contact the SAVOIR administrator\n\n[This message is auto-generated by the SAVOIR Management Services]\n

# Summary information on how to connect to SAVOIR over TCP for the registration 
# email to the device author. Bound variables will be ${ipAddress} (for the IP 
# address SAVOIR is listening on) and ${portNumber} (for the TCP port SAVOIR is 
# listening on)
registration.savoirConnection.tcp=\tSAVOIR Connection Method: TCP socket\n\tSAVOIR IP Address: "${toSavoirIpAddress}"\n\tSAVOIR TCP Port: "${toSavoirPortNumber}"\n\tDevice IP Address: "${toDeviceIpAddress}"\n\tDevice TCP Port: "${toDevicePortNumber}"\n

# Summary information on how to connect to SAVOIR over JMS for the registration 
# email to the device author. Bound variables will be ${connectionMethod} (for 
# the transport to connect to the JMS broker), ${brokerUri} (for the URI of the 
# JMS broker), ${toSavoirTopic} (for the topic to send messages to SAVOIR on), 
# and ${toDeviceTopic} (for the topic SAVOIR will send messages to the device 
# on)
registration.savoirConnection.jms=\tSAVOIR Connection Method: JMS Topic\n\tJMS Connection Transport: "${connectionMethod}"\n\tJMS Broker URI: "${brokerUri}"\n\tSAVOIR Inbound JMS Topic: "${toSavoirTopic}"\n\tSAVOIR Outbound JMS Topic: "${toDeviceTopic}"\n

# Name of attachment of registration ticket for the device owner
registration.device.attachment.name=RegistrationTicket.xml

# Description of attachment of registration ticket for the device owner
registration.device.attachment.desc=Registration ticket for ${deviceName}


###############################################################################
#
# Deployment-specific Properties
#
###############################################################################

# Server that MgmtServices are deployed on. Allowable values are "development" 
# and "production"
server.deployment=development
#server.deployment=production


###############################################################################
#
# API Connection Properties
#
###############################################################################

# Comma-separated list of prefixes for the properties denoting the valid API 
# passwords. (whitespace is allowed between the elements)
mgmtservices.api.prefixes=webBroker
#mgmtservices.api.prefixes=webBroker,example

# API keys for web broker
webBroker.username=webBroker
webBroker.password=broker20!()sav
webBroker.roles=ROLE_CLIENT

# Example properties for API prefix "example". username, password, and roles 
# are required; username and password are simple strings, roles is a 
# comma-separated list of role names (whitespace allowed). enabled, expired, 
# and locked are optional boolean properties, with allowed values "true" and 
# "false" (case-insensitive). If these properties are not present, or have an 
# invalid value, they will default to true, false, & false, respectively 

#example.username=test
#example.password=
#example.roles=ROLE_CLIENT
#examle.enabled=true
#example.expired=false
#example.locked=false


###############################################################################
#
# SAVOIR-specific configuration parameters
#
###############################################################################

# Credential schema ID for no authentication information (empty credential)
credentialMgr.schema.none=1
# Credential schema ID for mandatory username/password
credentialMgr.schema.unamePword=2
# Credential schema ID for optional username/password
credentialMgr.schema.unamePwordOpt=4

# Credential ID for empty credential
credentialMgr.emptyCredential=2



###############################################################################
#
# Disk-based File Repository Properties
#
###############################################################################

# Location of file repositories for various purposes. `registration` is the 
# storage location for the device registration tickets, `icon` is the storage 
# location for the service icons (this must be web-accessible to render the 
# widgets properly), `profile` is the location of the service profiles, 
# `scenario` is the location of the stored scenario files, `rule` is the 
# location of the compiled scenario rules, and `log` is the location of the 
# server-side session logs (this should not be web-accessible, as it may 
# contain sensitive security data)

repos.registration=/var/www/html/deviceRepos/
repos.icon=/var/www/html/deviceRepos/
repos.profile=/var/www/html/profileRepos/
repos.scenario=/var/www/html/scenarioRepos/
repos.rule=/var/www/html/ruleRepos/
repos.log=/usr/local/tomcat/logs/runSessions/

# Prefix of the web-accessible repos directories that is not part of the URI
repos.filePrefix=/var/www/html/
# Prefix to replace `filePrefix` with to make a local directory path a 
# web-accessible URI
repos.webPrefix=http://198.164.40.210/
#repos.webPrefix = http://198.164.40.171/

