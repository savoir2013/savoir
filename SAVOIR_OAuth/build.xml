<?xml version="1.0" encoding="UTF-8"?>

<!-- Licensed under Apache 2.0 -->
<!-- Copyright 2011, National Research Council of Canada -->
<!-- Property of Lakehead University -->


<!--
********************************************************************************
*
*                    National Research Council Canada - IIT
*
* PROJECT:		SAVOIR OAuth
* AUTHOR(S):	Justin Hickey, Aaron Moss
* PURPOSE:		The build infrastructure of SAVOIR is based on a series of build
*				files to allow deployment on both a development server and a
*				production server. Please see the "build.xml" file in the
*				"SAVOIR_MasterBuild" directory for further information on how
*				the build system works.
*
*				IMPORTANT NOTE:
*				===============
*					The project "build.xml" files can be used directly while
*					developing, but they will need a "build.properties" file in
*					order to run. Therefore, you should first run the
*					"copy-build-properties" target in the master build file to
*					create the "build.properties" files for the projects.
*
*				This build file defines the targets for building the SAVOIR
*				OAuth library. It will then publish its jar files to a savoir
*				repository in order that other projects can access them.
* DATE CREATED:	Feb 22, 2011
*
********************************************************************************
-->

<project name="savoirOAuth" default="build" xmlns:ivy="antlib:org.apache.ivy.ant"
	xmlns="antlib:org.apache.tools.ant">
	
	<description>Build file for the SAVOIR OAuth library</description>
	
	<!-- **************************** Properties *************************** -->
	
	<!-- Distribution directories -->
	<property name="src.home" value="${basedir}/src" />
	<property name="build.home" value="${basedir}/build" />
	<property name="dist.home" value="${basedir}/dist" />
	<property name="lib.home" value="${basedir}/libs" />
	<property name="local.lib.home" value="${basedir}/localLib" />
	
	<!-- Deployment files -->
	<property name="jar.name" value="savoirOauth" />
	<property name="base.jar.name" value="${jar.name}-base" />
	<property name="consumer.jar.name" value="${jar.name}-consumer" />
	<property name="provider.jar.name" value="${jar.name}-provider" />

	<!-- References for including and excluding code in builds -->
	<property name="base.path" value="ca/gc/nrc/iit/oauth" />
	<property name="consumer.path" value="${base.path}/consumer" />
	<property name="provider.path" value="${base.path}/provider" />
	<property name="provider.ws.path" value="${provider.path}/ws" />
	<property name="provider.servlet.path" value="${provider.path}/servlet" />
	
	
	<!-- ************************** Initialization  ************************ -->

	<!-- Check if the property file exists -->
	<available file="${basedir}/build.properties" property="prop.file.exists" />
	<fail message="Build properties file missing! Use the copy-build-properties target of the top level build to create it."
		unless="prop.file.exists" />
	
	<!-- Load in the main property file -->
	<property file="${basedir}/build.properties" />
	
	<!-- The task def below requires the ivy.jar file so make sure it is downloaded
		Download ivy from the web site so that it can be used even without
		any special installation -->
	<mkdir dir="${savoir.ivy.jar.dir}" />
	<get src="${savoir.ivy.url}/${savoir.ivy.install.version}/${savoir.ivy.jar.file}"
		dest="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" usetimestamp="true" skipexisting="true" />

	<!-- **************************** File Sets **************************** -->
	
	<fileset id="master.libs" dir="${lib.home}/master">
		<include name ="**/*.jar" />
	</fileset>
	
	<fileset id="prop.files" dir="${basedir}/conf"
		includes= "log4j.properties" />
			
	<!-- *************************** Class Paths *************************** -->
	
	<path id="master.class.path">
		<fileset refid="master.libs" />
	</path>

	<!-- ************************* Task Definitions ************************ -->
	
	<!-- Define the ivy ant task -->
	<taskdef resource="org/apache/ivy/ant/antlib.xml"
		uri="antlib:org.apache.ivy.ant" classpath="${savoir.ivy.jar.dir}/${savoir.ivy.jar.file}" />
	
	<!-- ************************* Default Targets ************************* -->
	
	<!-- **** Init **** -->
	<target name="init" description="Initialises the Savoir oauth project">
		<echo message="==== Savoir oauth init target ====" />
		
		<!-- Make the required diectories -->
		<mkdir dir="${build.home}" />
		<mkdir dir="${dist.home}" />
		<mkdir dir="${lib.home}" />
		<mkdir dir="${savoir.repo.home}" />
		
	</target>

	<!-- **** Build **** -->
	<target name="build" depends="build-base" description="Builds java classes">		
		<echo message="==== Savoir oauth build target ====" />

		<javac srcdir="${src.home}" destdir="${build.home}" encoding="utf-8" debug="${savoir.oaut.compile.debug}"
			deprecation="${savoir.oaut.compile.deprecation}" optimize="${savoir.oaut.compile.optimize}"
			source="${savoir.java.source.ver}" target="${savoir.java.target.ver}" includeAntRuntime="false">
	      		<classpath refid="master.class.path" />
				<include name="${provider.ws.path}/**" />
				<include name="${provider.servlet.path}/**" />
	    </javac>
	</target>

	<!-- **** Package **** -->
	<target name="package" depends="build, package-base" description="Copies default resources and calls jar target">
		<echo message="==== Savoir oauth package target ====" />

		<antcall target="package-oauth" />
		<antcall target="package-oauth-provider" />
		<antcall target="package-oauth-consumer" />
	</target>
	
	<!-- **** Deploy **** -->
	<target name="deploy" depends="package" description="Publishes all artifact files (jars) and the ivy xml file">
		<echo message="==== Savoir oauth deploy target ====" />

		<ivy:buildnumber organisation="ca.nrc.iit" module="savoirOAuth" revision="${ivy.revision}" />
		<ivy:publish pubrevision="${ivy.new.revision}" conf="master" forcedeliver="true" overwrite="true"
			artifactspattern="${dist.home}/[artifact].jar" resolver="savoir-lib-repo" status="release">
		</ivy:publish>
	</target>
	
	<!-- **** Clean **** -->
	<target name="clean" description="Cleans anything that is built.">
		<echo message="==== Savoir oauth clean target ====" />

		<delete dir="${build.home}" includeEmptyDirs="true" />
		<delete dir="${dist.home}" includeEmptyDirs="true" />
		<delete dir="${lib.home}" includeEmptyDirs="true" />
		
		<!-- The bin directory is usually created by default -->
		<delete dir="${basedir}/bin" includeEmptyDirs="true" />
	</target>

	<!-- **** Undeploy **** -->
	<target name="undeploy" description="No target actions">
		<echo message="==== Savoir oauth undeploy target ====" />
		<echo message="Undeploy target not supported." />
	</target>

	<!-- **** Doc **** -->
	<target name="doc" description="No target actions">
		<echo message="==== Savoir oauth doc target ====" />
		<echo message="Doc target not supported." />
	</target>

	<!-- **** Javadoc **** -->
	<target name="javadoc" description="No target actions">
		<echo message="==== Savoir oauth javadoc target ====" />
		<echo message="Javadoc target not supported." />
	</target>

	<!-- **** Test **** -->
	<target name="test" description="No target actions">
		<echo message="==== Savoir oauth test target ====" />
		<echo message="Test target not supported." />
	</target>

	<!-- ************************* Optional Targets ************************ -->

	<!-- **** Install-local-libs **** -->
	<target name="install-local-libs"
		description="Install any local libraries to the Savoir repository">
		<echo message="==== Savoir oauth install-local-libs target ====" />
		
		<ivy:install organisation="ca.nrc.iit" module="cxf" overwrite="true"
			revision="2.2.3" from="local-lib-repo" to="savoir-lib-repo" />
	</target>

	<!-- **** Retrieve-ivy-deps **** -->
	<target name="retrieve-ivy-deps" depends="install-local-libs"
		description="Retreive all library dependencies using Ivy to the project lib directory">
		<echo message="==== Savoir oauth retrieve-ivy-deps target ====" />
		
		<!-- Note that retrieve does a resolve as well thus, we don't have an ivy resolve target-->
		<ivy:retrieve pattern="${lib.home}/[conf]/[artifact].[ext]" />
	</target>

	<!-- ********************* Project Specific Targets ******************** -->
	
	<!-- **** Build-base **** -->
	<target name="build-base" depends="clean, init, retrieve-ivy-deps" description="Compile sources for base functionality">
		<javac srcdir="${src.home}" destdir="${build.home}" encoding="utf-8" debug="${savoir.oaut.compile.debug}"
			deprecation="${savoir.oaut.compile.deprecation}" optimize="${savoir.oaut.compile.optimize}"
			source="${savoir.java.source.ver}" target="${savoir.java.target.ver}" includeAntRuntime="false">
				<classpath refid="master.class.path" />
				<exclude name="${provider.ws.path}/**" />
				<exclude name="${provider.servlet.path}/**" />
		</javac>
	</target>

	<!-- **** Package-base **** -->
	<target name="package-base" depends="build-base" description="Package base Jar file">
		<jar destfile="${dist.home}/${base.jar.name}.jar" basedir="${build.home}"
			excludes="${provider.ws.path}/** ${provider.servlet.path}/**" update="true">
				<fileset refid="prop.files" />
		</jar>
	</target>

	<!-- **** Package-oauth **** -->
	<target name="package-oauth" description="Creates jar file for oauth. Only called by a package target">
		<jar destfile="${dist.home}/${jar.name}.jar" basedir="${build.home}" update="true">
           	<fileset refid="prop.files" />
		</jar>
	</target>
	
	<!-- **** Package-oauth-provider **** -->
	<target name="package-oauth-provider" description="Creates jar file for oauth provider. Only called by a package target">
		<jar destfile="${dist.home}/${provider.jar.name}.jar" basedir="${build.home}" excludes="${consumer.path}/**"
			update="true" >
				<fileset refid="prop.files" />
		</jar>
	</target>
	
	<!-- **** Package-oauth-consumer **** -->
	<target name="package-oauth-consumer" description="Creates jar file for oauth consumer. Only called by a package target">
		<jar destfile="${dist.home}/${consumer.jar.name}.jar" basedir="${build.home}" excludes="${provider.path}/**"
			update="true"  >
				<fileset refid="prop.files" />
		</jar>
	</target>

</project>
